{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(sqldf)\nlibrary(RSQLite)\n\nshinyServer(function(input, output) {\n\n  #  if (file.exists(\"Test.sqlite\") == TRUE) file.remove(\"Test.sqlite\")\n  # \n  # db <- dbConnect(SQLite(), dbname='Test.sqlite')\n  # \n  #    dbSendQuery(conn = db, \"CREATE TABLE School (SchID INTEGER,  Location TEXT, Authority TEXT, SchSize TEXT)\")\n  # \n  #     dbGetQuery(conn = db, \"INSERT INTO School VALUES (4, 'urban3', 'state','small')\")\n  #     \n  #      # dbSendQuery(conn = db,\"INSERT INTO School VALUES (2, \"urban\", \"independent\", 'large')\")\n  # \n  #      dbSendQuery(conn = db,'INSERT INTO School VALUES (3, ‘rural’, ‘state’, ‘small’)')\n  # \n  #      dbGetQuery(conn = db, \"INSERT INTO School VALUES (2, 'urban1', 'state','medium')\")\n  #     \n  #      dbGetQuery(conn = db, \"INSERT INTO School VALUES (5, 'urban2', 'state','small')\")\n  #   \n  #     cat(dbListTables(db))\n  #     print(  cat(dbListFields(db, 'School')))\n  #      print (dbReadTable(db, 'School'))\n\n############################################################################################################################\n      \n       values = reactiveValues()\n       data = reactive({\n         if (is.null(input$hot)) {\n           \n           hot = data.frame(Formulation_Lot_Number = \"\",Formulation_Batch_Sampling = \"\",\n                            Batch_Sampling_Replicaite =\"\", Analytical_Replicate_Integer = \"\",Data_Replicate = \"\", Master_MsetID =\"\")\n         } \n         else {\n           hot = hot_to_r(input$hot)\n           \n         }\n         \n         # this would be used as a function input\n         #  values[[\"hot\"]] = hot\n         #  hot\n       })\n       \n       \n       observe({\n         # input$saveBtn\n         hot = data()\n         # library(RPostgreSQL)\n         # drv <- dbDriver(\"PostgreSQL\") \n         # con <- dbConnect(drv, dbname = \"chembox\", host=\"genome-analytics-np.c4hzw6lhqdnu.us-east-1.rds.amazonaws.com\",port=5432,user = \"varroa_field_study_rw\", password = \"Exposition^Diplomat99\")\n         # if (file.exists(\"TryIt2.sqlite\") == TRUE) file.remove(\"TryIt2.sqlite\")\n         db <- dbConnect(SQLite(), dbname='TryIt2.sqlite')\n         # dbSendQuery(con = db, \"CREATE TABLE TryItagain (Formulation_lot_Number TEXT, Formulation_Batch_Sampling TEXT, batch_Sampling_Replicaite TEXT,Analytical_Replicate_Integer TEXT, Data_Replicate TEXT, Master_MsetID TEXT)\")\n         if (input$saveBtn) {\n           cat(dbListTables(db))\n           # dbWriteTable(db,hot, value = hot, append = TRUE, row.names = FALSE, overwrite=FALSE)\n           # dbCommit(db)\n           # dbDisconnect(db)\n         }\n        \n       })\n       \n       output$hot <- renderRHandsontable({\n         hot = data()\n         if (!is.null(hot)) {\n           \n           # hot = rhandsontable(hot) # %>%\n           hot <- rhandsontable(hot, width = 1200, height = 150)  %>%\n             hot_col(col=\"Formulation_Lot_Number\", type = \"autocomplete\", strict = FALSE)%>%\n             hot_col(col=\"Formulation_Batch_Sampling\", type = \"autocomplete\", strict = FALSE) %>% \n             hot_col(col=\"Batch_Sampling_Replicaite\", type = \"autocomplete\", strict = FALSE) %>%\n             hot_col(col=\"Analytical_Replicate_Integer\", type = \"autocomplete\", strict = FALSE) %>%\n             hot_col(col=\"Data_Replicate\", type = \"autocomplete\", strict = FALSE) %>%\n             hot_col(col=\"Master_MsetID\", type = \"autocomplete\", strict = FALSE) \n           \n           \n           # hot_table(highlightCol = TRUE, highlightRow = TRUE) %>%\n         }\n         else {\n           #  hot <-  rhandsontable(input$hot)\n           hot <-  rhandsontable(input$hot, width = 1200, height = 500)  %>%\n             hot_col(col=\"Formulation_Lot_Number\", type = \"autocomplete\", strict = FALSE) %>%\n             hot_col(col=\"Formulation_Batch_Sampling\", type = \"autocomplete\", strict = FALSE) %>%\n             hot_col(col=\"Batch_Sampling_Replicaite\", type = \"autocomplete\", strict = FALSE) %>%\n             hot_col(col=\"Analytical_Replicate_Integer\", type = \"autocomplete\", strict = FALSE) %>%\n             hot_col(col=\"Data_Replicate\", type = \"autocomplete\", strict = FALSE)  %>%\n             hot_col(col=\"Master_MsetID\", type = \"autocomplete\", strict = FALSE) \n           \n           \n         }\n       })\n       \n       # code to display Formulation_Batch_Sampling and batch_Sampling_Replicaite when we click on search button.\n       \n       eventReactive(input$searchdata,{\n         \n         output$prnt <- renderPrint({\n         \n         text <- strtoi(input$id, base = 10)\n         # browser()\n         # \n         db <- dbConnect(SQLite(), dbname='TryIt2.sqlite')\n         # cat(dbListTables(db))\n         sqlcmd <- paste(\"SELECT Formulation_Batch_Sampling,batch_Sampling_Replicaite FROM TryItagain WHERE Formulation_lot_Number==\",text,sep = \"\")\n         # sqlcmd <- paste(\"SELECT Formulation_Batch_Sampling,batch_Sampling_Replicaite FROM TryItagain WHERE Formulation_lot_Number==12 and Master_MsetID==3\") \n         # sqlcmd2 <- paste(\"select * from tryitagain\")\n         # pull <- dbSendQuery(conn=db, sqlcmd2)\n         # s3 <- fetch(pull, n=-1)\n         # print(s3)\n         \n         #These lines are used to fetch the data\n         pull <- dbSendQuery(conn = db, sqlcmd ) \n         df3 <- fetch(pull, n=-1)\n          print(df3)\n         #In a values of Formulation_Batch_Sampling are fetched & in b values of batch_Sampling_Replicaite are generated\n          a <- (df3[[1]])\n          b <-(df3[[2]])\n          \n\n         # In these lines values of Formulation_Batch_Sampling are pasted with first letter of batch_Sampling_Replicaite.\n          \n     \n          for (i in 1:length(a)) {\n            re <- ((substring(b[i],1,1)))\n            c <- paste((df3[1][i,]),re, sep = \"\")\n            print(c)\n            }\n        # dbCommit(db)\n        # dbDisconnect(db)\n       })\n      \n         hot = data()\n         data = reactive({\n           if (is.null(input$hot)) {\n             \n             hot = data.frame(Formulation_Lot_Number = \"\",Formulation_Batch_Sampling = \"\",\n                              Batch_Sampling_Replicaite =\"\", Analytical_Replicate_Integer = \"\",Data_Replicate = \"\", Master_MsetID =\"\")\n             \n           } \n           else {\n             hot = hot_to_r(input$hot)\n           }\n         })\n            \n         output$hot11 <- renderRHandsontable(\n         hot <- rhandsontable(hot, width = 1200, height = 500)  %>%\n           hot_col(col=\"Formulation_Lot_Number\", type = \"autocomplete\", strict = FALSE)%>%\n           hot_col(col=\"Formulation_Batch_Sampling\", type = \"autocomplete\", strict = FALSE) %>% \n           hot_col(col=\"Batch_Sampling_Replicaite\", type = \"autocomplete\", strict = FALSE) %>%\n           hot_col(col=\"Analytical_Replicate_Integer\", type = \"autocomplete\", strict = FALSE) %>%\n           hot_col(col=\"Data_Replicate\", type = \"autocomplete\", strict = FALSE) %>%\n           hot_col(col=\"Master_MsetID\", type = \"autocomplete\", strict = FALSE)\n         )\n       })    \n}\n)\n",
    "created" : 1485400022667.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1263743006",
    "id" : "7715875",
    "lastKnownWriteTime" : 1483964146,
    "last_content_update" : 1485400126652,
    "path" : "~/Desktop/Old Data/ok/Ashutosh's project/rsqlite/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}